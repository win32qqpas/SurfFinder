import os
import sys
import asyncio
from datetime import datetime, timedelta
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError

# =============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
# =============================
# –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: GMT+8 (–ë–∞–ª–∏)
TZ_OFFSET = 8  # —á–∞—Å—ã

def local_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è (GMT+TZ_OFFSET) –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM."""
    return (datetime.utcnow() + timedelta(hours=TZ_OFFSET)).strftime('%H:%M')

def local_datetime():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–Ω–æ–µ –¥–∞—Ç—É+–≤—Ä–µ–º—è (GMT+TZ_OFFSET) –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM."""
    return (datetime.utcnow() + timedelta(hours=TZ_OFFSET)).strftime('%d.%m %H:%M')

# =============================
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "1").strip())

print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n")
print(f"API_ID = {API_ID}")
print(f"API_HASH = {'‚úÖ –µ—Å—Ç—å' if API_HASH else '‚ùå –Ω–µ—Ç'}")
print(f"BOT_TOKEN = {'‚úÖ –µ—Å—Ç—å' if BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
print(f"CHAT_ID = {CHAT_ID}")
print(f"CHECK_INTERVAL_HOURS = {CHECK_INTERVAL_HOURS}\n")

missing = [k for k, v in {
    "API_ID": API_ID, "API_HASH": API_HASH, "BOT_TOKEN": BOT_TOKEN, "CHAT_ID": CHAT_ID
}.items() if not v]

if missing:
    print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ {', '.join(missing)}")
    sys.exit(1)
else:
    print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...\n")

# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
# =============================
client = TelegramClient("surf_session", int(API_ID), API_HASH)

# =============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait)
# =============================
async def send_message_safe(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–∏ FloodWait –∂–¥—ë—Ç –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ—Ç."""
    try:
        await client.send_message(int(chat_id), text)
        print(f"[{local_time()}] üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:120]!s}")
    except FloodWaitError as e:
        wait = e.seconds + 5
        print(f"[{local_time()}] ‚è≥ FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫ (–ø–ª—é—Å –±—É—Ñ–µ—Ä) = {wait} —Å–µ–∫...")
        await asyncio.sleep(wait)
        try:
            await client.send_message(int(chat_id), text)
            print(f"[{local_time()}] üì© –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ FloodWait —É—Å–ø–µ—à–Ω–∞.")
        except Exception as e2:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e2}")
    except Exception as e:
        print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# =============================
# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–∫–∞–∫ —É —Ç–µ–±—è)
# =============================
CHANNELS = [
    "balichatik","voprosBali","bali_russia_choogl","cangguchat",
    "bali_ubud_changu","balichat_canggu","balichat_bukit","balichatnash",
    "balichat_bukitwoman","balichatfit","balichatsurfing","balisurfer",
    "ChatCanggu","bukit_bali2","baliaab666","bali_chat","bali_ua"
]

KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä",
    "–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥", "–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É", "—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ–∫–µ–º–ø","—Å—ë—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É"
]

def contains_keyword(text):
    if not text:
        return False
    text = text.lower()
    return any(kw in text for kw in KEYWORDS)

async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = f"https://t.me/{channel}/{msg.id}" if getattr(msg, "id", None) else ""
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {local_datetime()}\n\n{text_snippet}\nüîó {link}"

# =============================
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
# =============================
async def check_history_and_send():
    print(f"[{local_time()}] üîé –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤...")
    found = []
    for ch in CHANNELS:
        try:
            entity = await client.get_entity(ch)
            msgs = await client.get_messages(entity, limit=50)
            for m in msgs:
                if m.message and contains_keyword(m.message):
                    formatted = await format_message(ch, m)
                    found.append(formatted)
            await asyncio.sleep(1 + (0.5 * (os.urandom(1)[0] % 3)))  # –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π sleep
        except FloodWaitError as e:
            wait = e.seconds + 5
            print(f"[{local_time()}] ‚è≥ FloodWait –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ch}: –∂–¥—ë–º {wait} —Å–µ–∫...")
            await asyncio.sleep(wait)
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {ch}: {e}")

    if found:
        batch = "\n\n---\n\n".join(found)
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        MAX_LEN = 4000
        pieces = [batch[i:i+MAX_LEN] for i in range(0, len(batch), MAX_LEN)]
        for p in pieces:
            await send_message_safe(CHAT_ID, f"üåä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:\n\n{p}")
        print(f"[{local_time()}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        print(f"[{local_time()}] üò¥ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# =============================
# –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
# =============================
@client.on(events.NewMessage(chats=CHANNELS))
async def new_message_handler(event):
    try:
        text = event.message.message
        if contains_keyword(text):
            channel_username = getattr(event.chat, "username", None) or getattr(event.chat, "title", str(event.chat))
            formatted = await format_message(channel_username, event.message)
            await send_message_safe(CHAT_ID, formatted)
            print(f"[{local_time()}] ‚úÖ –ù–æ–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ {channel_username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# =============================
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ (–∫–∞–∂–¥—ã–µ CHECK_INTERVAL_HOURS —á–∞—Å–æ–≤)
# =============================
async def periodic_ping():
    while True:
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        try:
            await send_message_safe(CHAT_ID, f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter –æ–Ω–ª–∞–π–Ω ‚Äî {local_time()}")
            print(f"[{local_time()}] ‚è±Ô∏è –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ: {e}")

# =============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π FloodWait –∏ –æ—à–∏–±–æ–∫
# =============================
async def main():
    try:
        print(f"[{local_time()}] üöÄ –°—Ç–∞—Ä—Ç Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.start(bot_token=BOT_TOKEN)
        await asyncio.sleep(1.5)  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        me = await client.get_me()
        print(f"[{local_time()}] ‚úÖ –ë–æ—Ç @{me.username or me.first_name} –∑–∞–ø—É—â–µ–Ω (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è).")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await send_message_safe(CHAT_ID,
                f"üåä –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã, –±–æ—Ç –≥–æ—Ç–æ–≤!\n"
                f"ü§ô –í–æ–ª–Ω—ã —á–µ–∫–∞–µ–º, –≤—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n"
                f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {local_time()}"
            )
            print(f"[{local_time()}] üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–∫—É.")
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await check_history_and_send()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω) –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥
        asyncio.create_task(periodic_ping())

        # –î–µ—Ä–∂–∏–º –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º
        await client.run_until_disconnected()

    except FloodWaitError as e:
        wait = e.seconds + 5
        print(f"[{local_time()}] ‚è≥ FloodWait: Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫. –ñ–¥—ë–º {wait} —Å–µ–∫...")
        await asyncio.sleep(wait)
        print(f"[{local_time()}] üîÅ –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ FloodWait.")
        # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
        os.execv(sys.executable, [sys.executable] + sys.argv)

    except Exception as e:
        print(f"[{local_time()}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(60)
        print(f"[{local_time()}] üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.")
        os.execv(sys.executable, [sys.executable] + sys.argv)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{local_time()}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä—É—á–Ω—É—é.")