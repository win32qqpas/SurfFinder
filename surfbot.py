import os
import asyncio
import random
from telethon import TelegramClient, events, errors
from datetime import datetime

# =============================
# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
# =============================
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHAT_ID = os.environ.get("CHAT_ID")  # –¢–≤–æ–π ID, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–ª —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
CHECK_INTERVAL_HOURS = float(os.environ.get("CHECK_INTERVAL_HOURS", 1))

print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"API_ID = {API_ID}")
print(f"API_HASH = {'‚úÖ –µ—Å—Ç—å' if API_HASH else '‚ùå –Ω–µ—Ç'}")
print(f"BOT_TOKEN = {'‚úÖ –µ—Å—Ç—å' if BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
print(f"CHAT_ID = {CHAT_ID}")
print(f"CHECK_INTERVAL_HOURS = {CHECK_INTERVAL_HOURS}")

if not all([API_ID, API_HASH, BOT_TOKEN, CHAT_ID]):
    raise SystemExit("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–∏. –ü—Ä–æ–≤–µ—Ä—å Environment Variables –≤ Render.")

print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...")

# =============================
# –°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–û–í –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
# =============================
CHANNELS = [
    "balichatik","voprosBali","bali_russia_choogl","cangguchat",
    "bali_ubud_changu","balichat_canggu","balichat_bukit","balichatnash",
    "balichat_bukitwoman","balichatfit","balichatsurfing","balisurfer",
    "ChatCanggu","bukit_bali2","baliaab666","bali_chat","bali_ua"
]

# =============================
# –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê
# =============================
KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä",
    "–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ–∫–µ–º–ø","—Å—ë—Ä—Ñ–∫–µ–º–ø"
]

# =============================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–ê
# =============================
client = TelegramClient("surfbot_session", int(API_ID), API_HASH)

# =============================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================
def contains_keyword(text):
    text = text.lower()
    return any(kw.lower() in text for kw in KEYWORDS)

async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = f"https://t.me/{channel}/{msg.id}" if getattr(msg, "id", None) else ""
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {msg.date.strftime('%d.%m %H:%M')}\n\n{text_snippet}\nüîó {link}"

# =============================
# –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ò –ö–ê–ù–ê–õ–û–í
# =============================
async def check_history():
    print("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    found_messages = []
    for channel in CHANNELS:
        try:
            entity = await client.get_entity(channel)
            messages = await client.get_messages(entity, limit=50)
            for msg in messages:
                if msg.message and contains_keyword(msg.message):
                    formatted = await format_message(channel, msg)
                    found_messages.append(formatted)
            await asyncio.sleep(1 + random.random() * 2)
        except errors.FloodWaitError as e:
            print(f"‚è≥ FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è {channel}")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel}: {e}")
            await asyncio.sleep(2)

    if found_messages:
        batch_message = "\n\n---\n\n".join(found_messages)
        try:
            await client.send_message(int(CHAT_ID), f"üåä –ù–∞–π–¥–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n{batch_message}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        print("üò¥ –ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# =============================
# –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# =============================
async def main():
    await client.start(bot_token=BOT_TOKEN)
    me = await client.get_me()
    print(f"üöÄ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

    # –°–æ–æ–±—â–∞–µ–º –≤ Telegram
    try:
        await client.send_message(int(CHAT_ID), f"üöÄ @{me.username} –∑–∞–ø—É—â–µ–Ω! ({datetime.now().strftime('%d.%m %H:%M')})")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await check_history()

    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @client.on(events.NewMessage(chats=CHANNELS))
    async def handler(event):
        text = event.message.message
        if contains_keyword(text):
            formatted = await format_message(event.chat.username or event.chat.title, event.message)
            try:
                await client.send_message(int(CHAT_ID), formatted)
                print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    while True:
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        print(f"üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL_HOURS} —á–∞—Å–æ–≤ ({datetime.now().strftime('%H:%M')})")
        await check_history()

# =============================
# –°–¢–ê–†–¢ –ü–†–û–ì–†–ê–ú–ú–´
# =============================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")