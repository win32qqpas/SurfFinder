import os
import asyncio
from datetime import datetime
from telethon import TelegramClient, events, errors

# === –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "1"))

# === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ ===
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
if not all([API_ID, API_HASH, BOT_TOKEN, CHAT_ID]):
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–∏ (API_ID, API_HASH, BOT_TOKEN, CHAT_ID)")
    raise SystemExit("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏.")
print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...\n")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient("surfbot_session", int(API_ID), API_HASH)

async def notify_startup():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
    try:
        await client.send_message(int(CHAT_ID),
            f"üöÄ SurfBot –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω!\n‚è∞ {datetime.now().strftime('%d.%m %H:%M')}")
        print("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except errors.FloodWaitError as e:
        print(f"‚è≥ FloodWait: –ø–æ–¥–æ–∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def periodic_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL_HOURS —á–∞—Å–æ–≤"""
    interval = CHECK_INTERVAL_HOURS * 3600
    while True:
        try:
            await client.send_message(int(CHAT_ID),
                f"ü§ô SurfBot –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω!\n–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m %H:%M')}")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ({datetime.now().strftime('%H:%M')})")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await asyncio.sleep(interval)

@client.on(events.NewMessage)
async def handle_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = event.message.message.lower()
    if "ping" in text:
        await event.respond("üèÑ‚Äç‚ôÇÔ∏è pong! –Ø –Ω–∞ –≤–æ–ª–Ω–µ üåä")

async def main():
    await client.start(bot_token=BOT_TOKEN)
    me = await client.get_me()
    print(f"ü§ñ –ë–æ—Ç {me.username} –∑–∞–ø—É—â–µ–Ω –≤ {datetime.now().strftime('%d.%m %H:%M')}")

    await notify_startup()
    asyncio.create_task(periodic_check())
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë SurfBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")