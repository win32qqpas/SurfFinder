import os
import asyncio
import random
from telethon import TelegramClient, errors
from telethon.sessions import StringSession
from datetime import datetime

# =============================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =============================
API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
SESSION = os.environ.get("SESSION_STRING")  # –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
OWNER_ID = int(os.environ.get("OWNER_ID"))  # –¢–≤–æ–π Telegram ID
CHECK_INTERVAL_HOURS = float(os.environ.get("CHECK_INTERVAL_HOURS", 0.75))  # 45 –º–∏–Ω—É—Ç

if not SESSION:
    raise SystemExit("ERROR: SESSION_STRING –Ω–µ –∑–∞–¥–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –µ—ë —á–µ—Ä–µ–∑ Telethon –∏ –¥–æ–±–∞–≤—å –≤ Environment Variables.")

# =============================
# –°–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
# =============================
CHANNELS = [
    "balichatik","voprosBali","bali_russia_choogl","cangguchat",
    "bali_ubud_changu","balichat_canggu","balichat_bukit","balichatnash",
    "balichat_bukitwoman","balichatfit","balichatsurfing","balisurfer",
    "ChatCanggu","bukit_bali2","baliaab666","bali_chat","bali_ua"
]

KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫",
    "—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä",
    "–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É"
]

# =============================
# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
# =============================
client = TelegramClient(StringSession(SESSION), API_ID, API_HASH)

# =============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================
def contains_keyword(text):
    text = text.lower()
    return any(kw.lower() in text for kw in KEYWORDS)

def format_message(channel, msg):
    # –ê–≤—Ç–æ—Ä
    author = "‚Äî"
    try:
        sender = asyncio.run(msg.get_sender())
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    # –¢–µ–∫—Å—Ç —Å—Ä–µ–∑
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    # –°—Å—ã–ª–∫–∞
    link = f"https://t.me/{getattr(msg.to_id, 'channel_id', msg.id)}" if not getattr(msg, 'id', None) else f"https://t.me/{channel}/{msg.id}"
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {msg.date.strftime('%d.%m %H:%M')}\n\n{text_snippet}\nüîó {link}"

# =============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# =============================
async def main():
    await client.connect()
    if not await client.is_user_authorized():
        await client.start()  # —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏
    me = await client.get_me()
    print(f"üöÄ SurfFinder –∑–∞–ø—É—â–µ–Ω. –ê–∫–∫–∞—É–Ω—Ç: {me.username or me.first_name}")

    while True:
        start_time = datetime.utcnow()
        found_messages = []

        for channel in CHANNELS:
            try:
                entity = await client.get_entity(channel)
                messages = await client.get_messages(entity, limit=50)
                for msg in messages:
                    if msg.message and contains_keyword(msg.message):
                        formatted = format_message(channel, msg)
                        found_messages.append(formatted)
                await asyncio.sleep(1 + random.random()*2)  # –º–∞–ª–µ–Ω—å–∫–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏

            except errors.FloodWaitError as e:
                print(f"‚è≥ FloodWait {e.seconds}s –¥–ª—è {channel}, —Å–ø–∏–º...")
                await asyncio.sleep(e.seconds + 5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel}: {e}")
                await asyncio.sleep(2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
        if found_messages:
            batch_message = "\n\n---\n\n".join(found_messages)
            try:
                await client.send_message('me', batch_message)  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Saved Messages
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        elapsed = (datetime.utcnow() - start_time).total_seconds()
        print(f"üïí –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Ä–µ–º—è: {elapsed:.1f}s. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_HOURS*60:.0f} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)

# =============================
# –°—Ç–∞—Ä—Ç
# =============================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Stopped by user")