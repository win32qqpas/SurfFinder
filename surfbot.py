#!/usr/bin/env python3
# main.py ‚Äî SurfHunter userbot (Telethon) ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –≥–¥–µ —Å–∏–¥–∏—Ç –∞–∫–∫–∞—É–Ω—Ç.
# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ª–∏—á–∫—É —á–µ—Ä–µ–∑ Bot API.

import os
import sys
import json
import random
import asyncio
import aiohttp
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events, utils
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError, RPCError

# ------------------------
# –ö–æ–Ω—Ñ–∏–≥ (–±–µ—Ä—ë–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
# ------------------------
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –≤ ENV
BOT_TOKEN = "8438987254:AAHPW6Sq_Z2VmXOEx0DJ7WRWnZ1vfmdi0Ik"  # –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
OWNER_CHAT_ID = os.getenv("OWNER_CHAT_ID")  # numeric id (–∫—É–¥–∞ –±–æ—Ç —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "1"))  # –ø–∏–Ω–≥-–æ–Ω–ª–∞–π–Ω
HISTORY_CHECK_HOURS = float(os.getenv("HISTORY_CHECK_HOURS", "2"))  # –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é
HISTORY_CHECK_LIMIT = int(os.getenv("HISTORY_CHECK_LIMIT", "100"))   # 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
TZ_OFFSET = int(os.getenv("TZ_OFFSET", "8"))  # –ë–∞–ª–∏ = +8
EXCLUDE_CHAT_IDS = os.getenv("EXCLUDE_CHAT_IDS", "")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: CSV –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö id
MAX_FORWARDS_PER_HOUR = int(os.getenv("MAX_FORWARDS_PER_HOUR", "40"))  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π/—á–∞—Å
SEEN_FILE = os.getenv("SEEN_FILE", "seen_ids.json")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
missing = [k for k, v in {
    "API_ID": API_ID, "API_HASH": API_HASH, "SESSION_STRING": SESSION_STRING,
    "OWNER_CHAT_ID": OWNER_CHAT_ID
}.items() if not v]

if missing:
    print("‚ùå Missing ENV vars:", missing)
    sys.exit(1)

# ------------------------
# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# ------------------------
KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º",
    "—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—É—Ä–æ–∫–∏ —Å—ë—Ä—Ñ–∏–Ω–≥–∞",
    "—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","—Å—ë—Ä—Ñ–∫–µ–º–ø","–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å—ë—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫–∏",
    "—Å–µ—Ä—Ñ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","—Å—ë—Ä—Ñ —Ç—Ä–µ–Ω–µ—Ä","surf","surfing","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞"
]

# ------------------------
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏
# ------------------------
UTC = timezone.utc
def local_now():
    return datetime.now(UTC) + timedelta(hours=TZ_OFFSET)

def local_time_str():
    return local_now().strftime("%H:%M")

def local_datetime_str():
    return local_now().strftime("%d.%m %H:%M")

# ------------------------
# –ö–ª–∏–µ–Ω—Ç—ã
# ------------------------
client = TelegramClient(StringSession(SESSION_STRING), int(API_ID), API_HASH)

BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# ------------------------
# Seen messages (–∞–Ω—Ç–∏-–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
# ------------------------
def load_seen():
    try:
        if os.path.exists(SEEN_FILE):
            with open(SEEN_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data) if isinstance(data, list) else set()
        return set()
    except Exception as e:
        print(f"[{local_time_str()}] ‚ö†Ô∏è Error loading seen: {e}")
        return set()

def save_seen(seen_set):
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(seen_set), f, ensure_ascii=False)
    except Exception as e:
        print(f"[{local_time_str()}] ‚ö†Ô∏è Error saving seen: {e}")

SEEN = load_seen()

def mark_seen(chat_id, msg_id):
    key = f"{chat_id}:{msg_id}"
    if key not in SEEN:
        SEEN.add(key)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ –±—ã—Å—Ç—Ä–æ
        save_seen(SEEN)
        return True
    return False

# ------------------------
# Rate limiter: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∑–∞ —á–∞—Å
# ------------------------
forwards_this_hour = 0
forwards_reset_time = datetime.now(UTC)

def allowed_forward():
    global forwards_this_hour, forwards_reset_time
    now = datetime.now(UTC)
    if now >= forwards_reset_time + timedelta(hours=1):
        forwards_reset_time = now
        forwards_this_hour = 0
    if forwards_this_hour < MAX_FORWARDS_PER_HOUR:
        forwards_this_hour += 1
        return True
    return False

# ------------------------
# –£—Ç–∏–ª–∏—Ç—ã —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞
# ------------------------
def contains_keyword(text):
    if not text:
        return False
    t = text.lower()
    for kw in KEYWORDS:
        if kw in t:
            return True
    return False

async def format_message(chat_identifier, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = " ".join(filter(None, [sender.first_name, sender.last_name])) or getattr(sender, "username", "‚Äî")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = ""
    ch_name = str(chat_identifier)
    try:
        ent = await client.get_entity(chat_identifier)
        ch_name = ent.username or getattr(ent, "title", str(chat_identifier))
        if getattr(ent, "username", None):
            link = f"https://t.me/{ent.username}/{msg.id}"
    except Exception:
        pass
    header = f"üìç {ch_name}\nüë§ {author.strip()}\nüïí {local_datetime_str()}\n\n"
    body = f"{text_snippet}\n"
    if link:
        body += f"\nüîó {link}"
    return header + body

# ------------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Bot API —Å –±—ç–∫–æ—Ñ—Ñ–æ–º –∏ chunking
# ------------------------
async def bot_send_text(text):
    MAX = 3900
    parts = [text[i:i+MAX] for i in range(0, len(text), MAX)]
    async with aiohttp.ClientSession() as session:
        for p in parts:
            # —Ä–∞–Ω–¥–æ–º–Ω–∞—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await asyncio.sleep(random.uniform(0.4, 1.8))
            payload = {"chat_id": int(OWNER_CHAT_ID), "text": p, "disable_web_page_preview": True}
            backoff = 1
            for attempt in range(5):
                try:
                    async with session.post(BOT_API_URL, json=payload, timeout=30) as resp:
                        data = await resp.text()
                        if resp.status == 200:
                            print(f"[{local_time_str()}] üì© Bot message sent (len {len(p)})")
                            break
                        else:
                            print(f"[{local_time_str()}] ‚ö†Ô∏è Bot API {resp.status}: {data}")
                            # –ø—Ä–∏ 429 —Å—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å backoff
                            await asyncio.sleep(backoff)
                            backoff = min(backoff * 2, 60)
                except Exception as e:
                    print(f"[{local_time_str()}] ‚ö†Ô∏è Error sending bot message: {e}")
                    await asyncio.sleep(backoff)
                    backoff = min(backoff * 2, 60)

# ------------------------
# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã–±–æ—Ä–∫–∞ —á–∞—Ç–æ–≤, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç
# ------------------------
async def gather_monitored_chats():
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dialog id –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ —Å–æ—Å—Ç–æ–∏—Ç –∞–∫–∫–∞—É–Ω—Ç,
    –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –õ–° –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —á–∞—Ç—ã –∏ —Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ EXCLUDE_CHAT_IDS.
    """
    exclude = set()
    if EXCLUDE_CHAT_IDS:
        for s in EXCLUDE_CHAT_IDS.split(","):
            s = s.strip()
            if s:
                try:
                    exclude.add(int(s))
                except:
                    pass

    ids = set()
    async for dialog in client.iter_dialogs():
        try:
            # dialog.entity –º–æ–∂–µ—Ç –±—ã—Ç—å Channel, Chat, User
            if getattr(dialog, "is_user", False):
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –õ–°
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ/—Å–∏—Å—Ç–µ–º–Ω—ã–µ
            ent = dialog.entity
            # –ß–µ–∫–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª (–∞ –Ω–µ –±–æ—Ç/–ø–∞–±–ª–∏–∫ –±–µ–∑ —Å–º—ã—Å–ª–∞)
            if getattr(ent, "megagroup", False) or getattr(ent, "broadcast", False) or getattr(ent, "group", False):
                cid = dialog.id
                if cid in exclude:
                    continue
                ids.add(cid)
        except Exception:
            continue
    return ids

# ------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –¥–ª—è –≤—Å–µ—Ö monitored chats)
# ------------------------
async def check_history_once(monitored_ids):
    print(f"[{local_time_str()}] üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ({len(monitored_ids)} —á–∞—Ç–æ–≤, limit {HISTORY_CHECK_LIMIT})...")
    found = []
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É —Å –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å ¬´–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª
    for ch in monitored_ids:
        try:
            # —á–∏—Ç–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–º–∏ –ø–∞—á–∫–∞–º–∏, —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –ø–∞—É–∑–æ–π
            msgs = await client.get_messages(ch, limit=HISTORY_CHECK_LIMIT)
            for m in msgs:
                if m.message and contains_keyword(m.message):
                    if mark_seen(ch, m.id):
                        fm = await format_message(ch, m)
                        found.append(fm)
                        # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        await asyncio.sleep(random.uniform(0.05, 0.35))
            # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è)
            await asyncio.sleep(random.uniform(0.8, 1.6))
        except FloodWaitError as e:
            print(f"[{local_time_str()}] ‚è≥ FloodWait –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ch}: {e.seconds}s")
            await asyncio.sleep(e.seconds + 5)
        except RPCError as e:
            print(f"[{local_time_str()}] ‚ö†Ô∏è RPCError —á—Ç–µ–Ω–∏—è {ch}: {e}")
            await asyncio.sleep(random.uniform(2, 5))
        except Exception as e:
            print(f"[{local_time_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {ch}: {e}")
            await asyncio.sleep(random.uniform(1, 3))

    if found:
        batch = "\n\n---\n\n".join(found)
        # –µ—Å–ª–∏ –º–Ω–æ–≥–æ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º, –∏ —Å–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –≤ —á–∞—Å
        if allowed_forward():
            await bot_send_text(f"üåä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ ({len(found)}):\n\n{batch}")
            print(f"[{local_time_str()}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {len(found)}")
        else:
            print(f"[{local_time_str()}] ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –≤ —á–∞—Å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        print(f"[{local_time_str()}] üò¥ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# ------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ç–µ–ø–µ—Ä—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ chats=..., –Ω–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏.
# ------------------------
@client.on(events.NewMessage)
async def new_message_handler(event):
    try:
        # —Ñ–∏–ª—å—Ç—Ä—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–º –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã)
        if event.is_private:
            return

        chat_id = event.chat_id
        # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–º —Ä–æ–±–æ—Ç–æ–º)
        await asyncio.sleep(random.uniform(0.4, 1.6))

        # –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ/–∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—É—á—à–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
        if getattr(event.message, "from_id", None) is None:
            return

        text = event.message.message or ""
        preview = text[:120].replace("\n", " ")
        print(f"[{local_time_str()}] üÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({chat_id}): {preview}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if contains_keyword(text):
            # –Ω–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω
            if not allowed_forward():
                print(f"[{local_time_str()}] ‚ö†Ô∏è –õ–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –≤ —á–∞—Å –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
                return

            # —Å—Ç–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–Ω–¥–æ–º–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π ‚Äî –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ —á–∏—Ç–∞–µ—Ç
            await asyncio.sleep(random.uniform(0.4, 2.4))

            # –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ seen
            if mark_seen(chat_id, event.message.id):
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
                formatted = await format_message(chat_id, event.message)
                await bot_send_text(formatted)
                print(f"[{local_time_str()}] ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            else:
                print(f"[{local_time_str()}] üí§ –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
    except FloodWaitError as e:
        print(f"[{local_time_str()}] ‚è≥ FloodWait –≤ handler: {e.seconds}s")
        await asyncio.sleep(e.seconds + 5)
    except Exception as e:
        print(f"[{local_time_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# ------------------------
# –ü–∏–Ω–≥ (–∫–∞–∂–¥—ã–π —á–∞—Å) ‚Äî —á—Ç–æ–±—ã Render –Ω–µ —É—Å—ã–ø–ª—è–ª –ø—Ä–æ—Ü–µ—Å—Å
# ------------------------
async def periodic_ping():
    while True:
        try:
            # –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL_HOURS —á–∞—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
            await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
            # —Ä–∞–Ω–¥–æ–º–∏–º —Ç–µ–∫—Å—Ç –ø–∏–Ω–≥–∞ ‚Äî –Ω–µ –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ –±–æ—Ç
            pings = [
                f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter ONLINE ‚Äî {local_time_str()}",
                f"üåä –°–µ—Ä—Ñ-—Ö–∞–Ω—Ç–µ—Ä –∂–∏–≤, {local_time_str()}",
                f"ü§ô –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ‚Äî {local_time_str()} (auto-ping)"
            ]
            await bot_send_text(random.choice(pings))
            print(f"[{local_time_str()}] ‚è±Ô∏è –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            print(f"[{local_time_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(10)

# ------------------------
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–∞–∂–¥—ã–µ HISTORY_CHECK_HOURS)
# ------------------------
async def periodic_history_check():
    while True:
        try:
            # —Å–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã
            monitored = await gather_monitored_chats()
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await check_history_once(monitored)
        except Exception as e:
            print(f"[{local_time_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        # –°–ø–∏–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
        await asyncio.sleep(HISTORY_CHECK_HOURS * 3600 + random.uniform(10, 300))

# ------------------------
# Main
# ------------------------
async def main():
    try:
        print(f"[{local_time_str()}] üöÄ –ó–∞–ø—É—Å–∫ Telethon userbot...")
        await client.start()
        me = await client.get_me()
        display_name = me.first_name or me.username or str(me.id)
        print(f"[{local_time_str()}] ‚úÖ User account started: {display_name}")

        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API)
        start_msg = (
            f"üòà {display_name} - –ü–û–î–ö–õ–Æ–ß–Å–ù –ö –≠–§–ò–†–£ ! - {local_time_str()}\n"
            f"ü´° –ì–û–¢–û–í –ù–ï–°–¢–ò –ú–ò–°–°–ò–Æ !\n"
            f"üåä –í–æ–ª–Ω—ã —á–µ–∫–∞—é, –≤—Å–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ !\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –≤ –ê–°–¢–†–ê–õ : {local_datetime_str()}"
        )
        await bot_send_text(start_msg)
        print(f"[{local_time_str()}] üì© –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SurfHanter-–±–æ—Ç–æ–º.")

        # –ü–µ—Ä–≤—ã–π —Å–±–æ—Ä monitored chats –∏ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        monitored = await gather_monitored_chats()
        await check_history_once(monitored)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(periodic_ping())
        asyncio.create_task(periodic_history_check())

        # run_until_disconnected() –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è NewMessage
        await client.run_until_disconnected()

    except FloodWaitError as e:
        print(f"[{local_time_str()}] ‚è≥ FloodWait (main): {e.seconds}s ‚Äî –∂–¥—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å")
        await asyncio.sleep(e.seconds + 5)
        os.execv(sys.executable, [sys.executable] + sys.argv)

    except Exception as e:
        print(f"[{local_time_str()}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (main): {e}")
        # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        await asyncio.sleep(30 + random.uniform(0, 10))
        os.execv(sys.executable, [sys.executable] + sys.argv)

# ------------------------
# Entrypoint
# ------------------------
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{local_time_str()}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"[{local_time_str()}] üí• Unhandled: {e}")