import os
import sys
import asyncio
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError

# =============================
# –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (GMT+8 ‚Äî –ë–∞–ª–∏)
# =============================
TZ_OFFSET = 8  # —á–∞—Å—ã (–ë–∞–ª–∏)

def local_time():
    return (datetime.now(timezone.utc) + timedelta(hours=TZ_OFFSET)).strftime('%H:%M')

def local_datetime():
    return (datetime.now(timezone.utc) + timedelta(hours=TZ_OFFSET)).strftime('%d.%m %H:%M')

# =============================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
# =============================
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ID (–∫—É–¥–∞ –±–æ—Ç —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "1").strip())

print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n")
print(f"API_ID = {API_ID}")
print(f"API_HASH = {'‚úÖ –µ—Å—Ç—å' if API_HASH else '‚ùå –Ω–µ—Ç'}")
print(f"BOT_TOKEN = {'‚úÖ –µ—Å—Ç—å' if BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
print(f"CHAT_ID = {CHAT_ID}")
print(f"CHECK_INTERVAL_HOURS = {CHECK_INTERVAL_HOURS}\n")

missing = [k for k, v in {
    "API_ID": API_ID, "API_HASH": API_HASH, "BOT_TOKEN": BOT_TOKEN, "CHAT_ID": CHAT_ID
}.items() if not v]

if missing:
    print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ {', '.join(missing)}")
    sys.exit(1)
else:
    print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...\n")

# =============================
# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# =============================
CHAT_IDS = [
    -1001356532108,
    -1002363500314,
    -1001311121622,
    -1001388027785,
    -1001508876175,
    -1001277376699,
    -1001946343717,
    -1001341855810,
    -1001278212382,
    -1001361144761,
    -1001706773923,
    -1001643118953,
    -1001032422089,
    -1001716678830,
    -1001540608753,
    -1001867725040,
    -1001726137174,
    -1002624129997,
    -1002490371800   # üî∏ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç
]

# =============================
# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# =============================
KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º",
    "—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—É—Ä–æ–∫–∏ —Å—ë—Ä—Ñ–∏–Ω–≥–∞",
    "—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","—Å—ë—Ä—Ñ–∫–µ–º–ø","–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å—ë—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫–∏",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–µ—Ä—Ñ","surf","surfing","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–µ—Ä—Ñ–∏–Ω–≥–∞"
]

def contains_keyword(text):
    if not text:
        return False
    lc = text.lower()
    return any(kw in lc for kw in KEYWORDS)

# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
# =============================
client = TelegramClient("surf_session", int(API_ID), API_HASH)

# =============================
# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# =============================
async def send_message_safe(to_chat, text):
    try:
        await client.send_message(int(to_chat), text)
        print(f"[{local_time()}] üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:120]!s}")
    except FloodWaitError as e:
        wait = e.seconds + 5
        print(f"[{local_time()}] ‚è≥ FloodWait {e.seconds} —Å–µ–∫, –∂–¥—ë–º...")
        await asyncio.sleep(wait)
        await client.send_message(int(to_chat), text)
    except Exception as e:
        print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# =============================
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =============================
async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass

    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    try:
        channel_username = (await client.get_entity(channel)).username
        link = f"https://t.me/{channel_username}/{msg.id}" if channel_username else ""
    except Exception:
        link = ""

    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {local_datetime()}\n\n{text_snippet}\nüîó {link}"

# =============================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# =============================
async def check_history_and_send():
    print(f"[{local_time()}] üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ {len(CHAT_IDS)} —á–∞—Ç–∞—Ö...")
    found = []
    for ch in CHAT_IDS:
        try:
            entity = await client.get_entity(ch)
            msgs = await client.get_messages(entity, limit=50)
            for m in msgs:
                if m.message and contains_keyword(m.message):
                    formatted = await format_message(ch, m)
                    found.append(formatted)
            await asyncio.sleep(1.2)
        except FloodWaitError as e:
            wait = e.seconds + 5
            print(f"[{local_time()}] ‚è≥ FloodWait {e.seconds} —Å–µ–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ch}, –∂–¥—ë–º...")
            await asyncio.sleep(wait)
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ch}: {e}")

    if found:
        batch = "\n\n---\n\n".join(found)
        MAX_LEN = 4000
        parts = [batch[i:i+MAX_LEN] for i in range(0, len(batch), MAX_LEN)]
        for p in parts:
            await send_message_safe(CHAT_ID, f"üåä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ({len(found)}):\n\n{p}")
        print(f"[{local_time()}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        print(f"[{local_time()}] üò¥ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# =============================
# –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =============================
@client.on(events.NewMessage(chats=CHAT_IDS))
async def new_message_handler(event):
    try:
        text = event.message.message or ""
        print(f"[{local_time()}] üÜï –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]!s}")
        if contains_keyword(text):
            channel_name = getattr(event.chat, "username", None) or getattr(event.chat, "title", str(event.chat))
            formatted = await format_message(channel_name, event.message)
            await send_message_safe(CHAT_ID, formatted)
            print(f"[{local_time()}] ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

# =============================
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥
# =============================
async def periodic_ping():
    while True:
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        await send_message_safe(CHAT_ID, f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter –æ–Ω–ª–∞–π–Ω ‚Äî {local_time()}")
        print(f"[{local_time()}] ‚è±Ô∏è –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# =============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ä—Ç
# =============================
async def main():
    try:
        print(f"[{local_time()}] üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.start(bot_token=BOT_TOKEN)
        me = await client.get_me()
        print(f"[{local_time()}] ‚úÖ –ë–æ—Ç @{me.username or me.first_name} –∑–∞–ø—É—â–µ–Ω!")

        await send_message_safe(CHAT_ID, f"üåä –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã, –±–æ—Ç –≥–æ—Ç–æ–≤!\nü§ô –í–æ–ª–Ω—ã —á–µ–∫–∞–µ–º, –≤—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ.\nüïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {local_time()}")

        await check_history_and_send()
        asyncio.create_task(periodic_ping())

        await client.run_until_disconnected()

    except FloodWaitError as e:
        wait = e.seconds + 5
        print(f"[{local_time()}] ‚è≥ FloodWait {e.seconds} —Å–µ–∫. –ñ–¥—ë–º {wait} —Å–µ–∫...")
        await asyncio.sleep(wait)
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        print(f"[{local_time()}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(60)
        os.execv(sys.executable, [sys.executable] + sys.argv)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{local_time()}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä—É—á–Ω—É—é.")