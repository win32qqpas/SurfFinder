import os
import asyncio
import random
from telethon import TelegramClient, events, errors
from datetime import datetime

# =============================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
API_ID = int(os.environ.get("API_ID", 0))
API_HASH = os.environ.get("API_HASH", "")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
CHECK_INTERVAL_HOURS = float(os.environ.get("CHECK_INTERVAL_HOURS", 0.75))

if not API_ID or not API_HASH or not BOT_TOKEN:
    raise SystemExit("‚ùå API_ID, API_HASH –∏–ª–∏ BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# =============================
# –ö–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# =============================
CHANNELS = ["balichatik", "voprosBali", "bali_russia_choogl"]  # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
KEYWORDS = ["—Å–µ—Ä—Ñ–∏–Ω–≥", "—Å–µ—Ä—Ñ–∏–Ω–≥—É", "—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞"]  # –ø—Ä–∏–º–µ—Ä

# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
# =============================
client = TelegramClient('bot_session', API_ID, API_HASH)

# =============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================
def contains_keyword(text):
    text = text.lower()
    return any(kw.lower() in text for kw in KEYWORDS)

async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = f"https://t.me/{channel}/{msg.id}" if getattr(msg, "id", None) else ""
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {msg.date.strftime('%d.%m %H:%M')}\n\n{text_snippet}\nüîó {link}"

async def check_history():
    found_messages = []
    for channel in CHANNELS:
        try:
            entity = await client.get_entity(channel)
            messages = await client.get_messages(entity, limit=100)
            for msg in messages:
                if msg.message and contains_keyword(msg.message):
                    formatted = await format_message(channel, msg)
                    found_messages.append(formatted)
            await asyncio.sleep(1 + random.random()*2)
        except errors.FloodWaitError as e:
            print(f"‚è≥ FloodWait {e.seconds}s –¥–ª—è {channel}, –∂–¥—É...")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel}: {e}")
            await asyncio.sleep(2)
    if found_messages:
        batch_message = "\n\n---\n\n".join(found_messages)
        try:
            await client.send_message('me', batch_message)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# =============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# =============================
async def main():
    await client.start(bot_token=BOT_TOKEN)
    me = await client.get_me()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ
    await client.send_message('me', f"üöÄ {me.username or me.first_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! {datetime.now().strftime('%d.%m %H:%M')}")
    print(f"üöÄ {me.username or me.first_name} –∑–∞–ø—É—â–µ–Ω!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É
    await check_history()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @client.on(events.NewMessage(chats=CHANNELS))
    async def handler(event):
        try:
            text = event.message.message
            if contains_keyword(text):
                formatted = await format_message(event.chat.username or event.chat.title, event.message)
                await client.send_message('me', formatted)
                print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title}")
        except errors.FloodWaitError as e:
            print(f"‚è≥ FloodWait {e.seconds}s –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∂–¥—É...")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª
    while True:
        print(f"üïí –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_HOURS*60:.0f} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        await check_history()

        # –ï–∂–µ—á–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
        await client.send_message('me', f"‚è∞ {me.username or me.first_name} –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m %H:%M')}")

# =============================
# –°—Ç–∞—Ä—Ç
# =============================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")