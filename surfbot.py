import os
import asyncio
from datetime import datetime
from telethon import TelegramClient, events
from telethon.errors import FloodWaitError

# === üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", 1.0))

print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n")
print(f"API_ID = {API_ID}")
print(f"API_HASH = {'‚úÖ –µ—Å—Ç—å' if API_HASH else '‚ùå –Ω–µ—Ç'}")
print(f"BOT_TOKEN = {'‚úÖ –µ—Å—Ç—å' if BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
print(f"CHAT_ID = {CHAT_ID}")
print(f"CHECK_INTERVAL_HOURS = {CHECK_INTERVAL_HOURS}\n")

missing = [k for k, v in {
    "API_ID": API_ID, "API_HASH": API_HASH, "BOT_TOKEN": BOT_TOKEN, "CHAT_ID": CHAT_ID
}.items() if not v]

if missing:
    print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ {', '.join(missing)}")
    raise SystemExit(1)
else:
    print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...\n")

# === ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient("surf_session", int(API_ID), API_HASH)

# === üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã ===
@client.on(events.NewMessage(chats=int(CHAT_ID)))
async def handler(event):
    try:
        messages = await client.get_messages(int(CHAT_ID), limit=50)
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üîπ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# === üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
async def hourly_check():
    while True:
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        try:
            now = datetime.now().strftime('%H:%M')
            await client.send_message(int(CHAT_ID), f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter –æ–Ω–ª–∞–π–Ω ({now})")
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å FloodWait –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –≤ –õ–° ===
async def main():
    try:
        await client.start(bot_token=BOT_TOKEN)
        me = await client.get_me()
        print(f"üöÄ –ë–æ—Ç @{me.username or me.first_name} –∑–∞–ø—É—â–µ–Ω ({datetime.now().strftime('%d.%m %H:%M')})")

        # üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        try:
            await client.send_message(int(CHAT_ID),
                f"üåä –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã, –±–æ—Ç –≥–æ—Ç–æ–≤!\n"
                f"ü§ô –í–æ–ª–Ω—ã —á–µ–∫–∞–µ–º, –≤—Å—ë —Å—Ç–∞–±–∏–ª—å–Ω–æ.\n"
                f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M')}")
            print("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")

        # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        asyncio.create_task(hourly_check())

        await client.run_until_disconnected()

    except FloodWaitError as e:
        wait = e.seconds + 5
        print(f"‚è≥ FloodWait: Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥. –ñ–¥—ë–º {wait} —Å–µ–∫...")
        await asyncio.sleep(wait)
        print("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait...\n")
        await main()

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        await asyncio.sleep(60)
        print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...\n")
        await main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä—É—á–Ω—É—é.")