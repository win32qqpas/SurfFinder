# SurfFinder ‚Äî Telegram –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
# –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç, –∏—â–µ—Ç –ø–æ –ø—É–±–ª–∏—á–Ω—ã–º —á–∞—Ç–∞–º –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# –ê–≤—Ç–æ—Ä: —Ç—ã –∏ —Ç–≤–æ—è –≤–æ–ª–Ω–∞ üåä

import os
import asyncio
import re
from datetime import datetime, timezone, timedelta
from telethon import TelegramClient, errors

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
API_ID = int(os.environ.get('API_ID', '0'))
API_HASH = os.environ.get('API_HASH', '')
BOT_TOKEN = os.environ.get('BOT_TOKEN', '')
OWNER_ID = int(os.environ.get('OWNER_ID', '0'))

# –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (0.333333 —á–∞—Å–∞)
CHECK_INTERVAL_HOURS = float(os.environ.get('CHECK_INTERVAL_HOURS', '0.333333'))

CHANNELS_RAW = os.environ.get('CHANNELS', '')
KEYWORDS_RAW = os.environ.get('KEYWORDS', '')

CHANNELS = [c.strip() for c in CHANNELS_RAW.split(',') if c.strip()]
KEYWORDS = [k.strip().lower() for k in KEYWORDS_RAW.split(',') if k.strip()]

if not (API_ID and API_HASH and BOT_TOKEN and OWNER_ID and CHANNELS and KEYWORDS):
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å API_ID, API_HASH, BOT_TOKEN, OWNER_ID, CHANNELS, KEYWORDS.")
    raise SystemExit(1)

# ==== –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ ====
async def search_messages(client):
    found = []
    now = datetime.now(timezone.utc)
    cutoff = now - timedelta(hours=CHECK_INTERVAL_HOURS + 1)

    for chat in CHANNELS:
        try:
            entity = await client.get_entity(chat)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç {chat}: {e}")
            continue

        for kw in KEYWORDS:
            try:
                async for msg in client.iter_messages(entity, search=kw, limit=50):
                    if not msg.message:
                        continue
                    msg_date = msg.date.replace(tzinfo=timezone.utc)
                    if msg_date < cutoff:
                        continue

                    author = "‚Äî"
                    try:
                        sender = await msg.get_sender()
                        if sender:
                            author = (sender.first_name or '') + ' ' + (sender.last_name or '')
                            if getattr(sender, 'username', None):
                                author += f" (@{sender.username})"
                    except Exception:
                        pass

                    link = f"https://t.me/{getattr(entity, 'username', entity.id)}/{msg.id}" if getattr(entity, 'username', None) else ''
                    text = msg.message[:700]

                    found.append({
                        "chat": chat,
                        "author": author.strip(),
                        "text": text,
                        "link": link,
                        "date": msg_date
                    })

            except errors.FloodWaitError as e:
                print(f"‚è≥ FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.seconds + 5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ {chat}: {e}")

    return found

# ==== –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ====
async def main():
    print("üöÄ SurfFinder –∑–∞–ø—É—â–µ–Ω!")
    client = TelegramClient("surf_session", API_ID, API_HASH)
    await client.start(bot_token=BOT_TOKEN)

    while True:
        try:
            results = await search_messages(client)
            if results:
                message = f"üåä –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å–µ—Ä—Ñ–∏–Ω–≥–µ:\n\n"
                for r in results:
                    message += f"üìç {r['chat']}\nüë§ {r['author']}\nüïí {r['date'].strftime('%d.%m %H:%M')}\n\n{r['text']}\nüîó {r['link']}\n\n"

                try:
                    await client.send_message(OWNER_ID, message)
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            else:
                print(f"ü§ô –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ({datetime.now().strftime('%H:%M:%S')})")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë SurfFinder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
