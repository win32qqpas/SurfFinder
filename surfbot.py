import os
import asyncio
from datetime import datetime
from telethon import TelegramClient, events

# === –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render Environment Variables) ===
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π ===
missing_keys = [k for k, v in {
    "API_ID": API_ID,
    "API_HASH": API_HASH,
    "BOT_TOKEN": BOT_TOKEN,
    "CHAT_ID": CHAT_ID
}.items() if not v]

if missing_keys:
    print(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ {', '.join(missing_keys)}")
    raise SystemExit()
else:
    print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient('surf_session', int(API_ID), API_HASH)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=int(CHAT_ID)))
async def message_handler(event):
    try:
        messages = await client.get_messages(int(CHAT_ID), limit=50)
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üîπ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —á–∞—Å ===
async def hourly_check():
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
        time_now = datetime.now().strftime('%H:%M')
        print(f"[{time_now}] ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.")
        try:
            await client.send_message(int(CHAT_ID), f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter –Ω–∞ —Å–≤—è–∑–∏ {time_now}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    try:
        await client.start(bot_token=BOT_TOKEN)
        me = await client.get_me()
        print(f"üöÄ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω ({datetime.now().strftime('%d.%m %H:%M')})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
        await client.send_message(int(CHAT_ID), f"ü§ô SurfHunter –∑–∞–ø—É—â–µ–Ω üåä {datetime.now().strftime('%H:%M')}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        asyncio.create_task(hourly_check())

        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.run_until_disconnected()

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        await main()


if __name__ == "__main__":
    asyncio.run(main())