import os
import asyncio
import random
from datetime import datetime, timezone
from telethon import TelegramClient, events, errors

# =============================
# üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
API_ID = int(os.environ.get("API_ID", 0))
API_HASH = os.environ.get("API_HASH", "")
BOT_TOKEN = os.environ.get("BOT_TOKEN", "")
CHAT_ID = int(os.environ.get("CHAT_ID", "2084700847"))
CHECK_INTERVAL_HOURS = float(os.environ.get("CHECK_INTERVAL_HOURS", 1.0))

if not all([API_ID, API_HASH, BOT_TOKEN]):
    raise SystemExit("‚ùå ERROR: –ù–µ –∑–∞–¥–∞–Ω—ã API_ID / API_HASH / BOT_TOKEN")

print("‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–∞—Ä—Ç—É–µ–º...")

# =============================
# üì° –ö–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# =============================
CHANNELS = [
    "balichatik", "voprosBali", "bali_russia_choogl", "cangguchat",
    "bali_ubud_changu", "balichat_canggu", "balichat_bukit", "balichatnash",
    "balichat_bukitwoman", "balichatfit", "balichatsurfing", "balisurfer",
    "ChatCanggu", "bukit_bali2", "baliaab666", "bali_chat", "bali_ua"
]

KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—É—Ä–æ–∫–∏ —Å—ë—Ä—Ñ–∏–Ω–≥–∞","—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","—Å—ë—Ä—Ñ–∫–µ–º–ø",
    "–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å—ë—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É"
]

# =============================
# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
# =============================
client = TelegramClient("bot_session", API_ID, API_HASH)

def contains_keyword(text):
    return any(kw.lower() in text.lower() for kw in KEYWORDS)

async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass

    text_snippet = (msg.message[:700] + "...") if msg.message and len(msg.message) > 700 else (msg.message or "")
    link = f"https://t.me/{channel}/{msg.id}" if getattr(msg, "id", None) else f"https://t.me/{channel}"
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {msg.date.strftime('%d.%m %H:%M')}\n\n{text_snippet}\nüîó {link}"

# =============================
# üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
# =============================
async def check_history():
    found_messages = []
    for channel in CHANNELS:
        try:
            entity = await client.get_entity(channel)
            async for msg in client.iter_messages(entity, limit=100):
                if msg.message and contains_keyword(msg.message):
                    formatted = await format_message(channel, msg)
                    found_messages.append(formatted)
            await asyncio.sleep(1 + random.random() * 2)
        except errors.FloodWaitError as e:
            print(f"‚è≥ FloodWait: {e.seconds} —Å–µ–∫ –¥–ª—è {channel}")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel}: {e}")
            await asyncio.sleep(2)

    if found_messages:
        batch = "\n\n---\n\n".join(found_messages)
        try:
            await client.send_message(CHAT_ID, f"üåä –ù–∞–π–¥–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n{batch}")
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# =============================
# ‚è∞ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
# =============================
async def main():
    await client.start(bot_token=BOT_TOKEN)
    me = await client.get_me()
    print(f"üöÄ –ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    try:
        await client.send_message(CHAT_ID, f"üöÄ –ë–æ—Ç @{me.username} –∑–∞–ø—É—â–µ–Ω {datetime.now().strftime('%d.%m %H:%M')}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    @client.on(events.NewMessage(chats=CHANNELS))
    async def handler(event):
        text = event.message.message or ""
        if contains_keyword(text):
            formatted = await format_message(event.chat.username or event.chat.title, event.message)
            try:
                await client.send_message(CHAT_ID, formatted)
                print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–æ–∫
    while True:
        await check_history()
        print(f"üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∞—è —á–µ—Ä–µ–∑ {CHECK_INTERVAL_HOURS * 60:.0f} –º–∏–Ω—É—Ç.")
        try:
            await client.send_message(CHAT_ID, f"‚úÖ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω {datetime.now().strftime('%H:%M')}")
        except Exception:
            pass
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)

# =============================
# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
# =============================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")