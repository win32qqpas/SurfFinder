import os
import asyncio
import random
from telethon import TelegramClient, errors, events
from telethon.sessions import StringSession
from datetime import datetime, timezone

# =============================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =============================
BOT_TOKEN = os.environ.get("BOT_TOKEN")
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
CHECK_INTERVAL_HOURS = float(os.environ.get("CHECK_INTERVAL_HOURS", 0.75))

if not BOT_TOKEN:
    raise SystemExit("ERROR: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Environment Variables.")
if not API_ID or not API_HASH:
    raise SystemExit("ERROR: API_ID –∏–ª–∏ API_HASH –Ω–µ –∑–∞–¥–∞–Ω—ã. –î–æ–±–∞–≤—å –∏—Ö –≤ Environment Variables.")

print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω.")

# =============================
# –ö–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# =============================
CHANNELS = [
    "balichatik","voprosBali","bali_russia_choogl","cangguchat",
    "bali_ubud_changu","balichat_canggu","balichat_bukit","balichatnash",
    "balichat_bukitwoman","balichatfit","balichatsurfing","balisurfer",
    "ChatCanggu","bukit_bali2","baliaab666","bali_chat","bali_ua"
]

KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—É—Ä–æ–∫–∏ —Å—ë—Ä—Ñ–∏–Ω–≥–∞","—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","—Å—ë—Ä—Ñ–∫–µ–º–ø",
    "–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å—ë—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É"
]

# =============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
# =============================
client = TelegramClient('bot_session', int(API_ID), API_HASH).start(bot_token=BOT_TOKEN)

# =============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================
def contains_keyword(text):
    text = text.lower()
    return any(kw.lower() in text for kw in KEYWORDS)

async def format_message(channel, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = (sender.first_name or "") + " " + (sender.last_name or "")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = f"https://t.me/{channel}/{msg.id}" if getattr(msg, "id", None) else f"https://t.me/{getattr(msg.to_id, 'channel_id', '')}"
    return f"üìç {channel}\nüë§ {author.strip()}\nüïí {msg.date.strftime('%d.%m %H:%M')}\n\n{text_snippet}\nüîó {link}"

# =============================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
# =============================
async def check_history():
    found_messages = []
    for channel in CHANNELS:
        try:
            entity = await client.get_entity(channel)
            messages = await client.get_messages(entity, limit=100)  # 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            for msg in messages:
                if msg.message and contains_keyword(msg.message):
                    formatted = await format_message(channel, msg)
                    found_messages.append(formatted)
            await asyncio.sleep(1 + random.random()*2)
        except errors.FloodWaitError as e:
            print(f"‚è≥ FloodWait {e.seconds}s –¥–ª—è {channel}, —Å–ø–∏–º...")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {channel}: {e}")
            await asyncio.sleep(2)
    if found_messages:
        batch_message = "\n\n---\n\n".join(found_messages)
        try:
            # –î–ª—è –±–æ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
            CHAT_ID = os.environ.get("CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–æ–π Telegram ID
            await client.send_message(CHAT_ID, batch_message)
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# =============================
async def main():
    me = await client.get_me()
    print(f"üöÄ SurfBot –∑–∞–ø—É—â–µ–Ω. –ë–æ—Ç: {me.username}")

    # ====== –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É ======
    await check_history()

    # ====== –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ======
    @client.on(events.NewMessage(chats=CHANNELS))
    async def handler(event):
        text = event.message.message
        if contains_keyword(text):
            formatted = await format_message(event.chat.username or event.chat.title, event.message)
            try:
                CHAT_ID = os.environ.get("CHAT_ID")
                await client.send_message(CHAT_ID, formatted)
                print(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {event.chat.title}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # ====== –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª –¥–ª—è –ª–æ–≥–æ–≤ ======
    while True:
        print(f"üïí –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_HOURS*60:.0f} –º–∏–Ω—É—Ç.")
        await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)

# =============================
# –°—Ç–∞—Ä—Ç
# =============================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Stopped by user")