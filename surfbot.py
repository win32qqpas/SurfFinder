#!/usr/bin/env python3
# surf_human_userbot ‚Äî –º–æ–Ω–∏—Ç–æ—Ä —á–∞—Ç–æ–≤ —Å "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º" –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º

import os
import sys
import json
import asyncio
import aiohttp
import random
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError, RPCError

# =========================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")  # —Å–µ—Å—Å–∏—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
BOT_TOKEN = "8438987254:AAHPW6Sq_Z2VmXOEx0DJ7WRWnZ1vfmdi0Ik"
OWNER_CHAT_ID = os.getenv("OWNER_CHAT_ID")  # numeric id (—Ç–≤–æ—è –ª–∏—á–∫–∞)
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "2"))
TZ_OFFSET = int(os.getenv("TZ_OFFSET", "8"))  # –ë–∞–ª–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
missing = [k for k, v in {"API_ID": API_ID, "API_HASH": API_HASH, "SESSION_STRING": SESSION_STRING, "OWNER_CHAT_ID": OWNER_CHAT_ID}.items() if not v]
if missing:
    print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:", missing)
    sys.exit(1)

# =========================
# üåä –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# =========================
KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ","—Å—ë—Ä—Ñ","surf","surfing",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä",
    "—Å–µ—Ä—Ñ–∫–µ–º–ø","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å—ë—Ä—Ñ –∫–µ–º–ø","—Å–µ—Ä—Ñ –ª–∞–≥–µ—Ä—å","surf school"
]

# =========================
# üïí –í—Ä–µ–º—è
# =========================
UTC = timezone.utc
def local_now():
    return datetime.now(UTC) + timedelta(hours=TZ_OFFSET)
def local_time():
    return local_now().strftime("%H:%M")
def local_datetime():
    return local_now().strftime("%d.%m %H:%M")

# =========================
# üß† –§–∞–π–ª—ã
# =========================
SEEN_FILE = "seen_msgs.json"

def load_seen():
    try:
        if os.path.exists(SEEN_FILE):
            with open(SEEN_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f))
    except:
        pass
    return set()

def save_seen(data):
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(data), f, ensure_ascii=False)
    except Exception as e:
        print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

SEEN = load_seen()

# =========================
# üß© Telethon client
# =========================
client = TelegramClient(StringSession(SESSION_STRING), int(API_ID), API_HASH)
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# =========================
# üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Bot API
# =========================
async def bot_send(text):
    if not text:
        return
    MAX = 3900
    parts = [text[i:i+MAX] for i in range(0, len(text), MAX)]
    async with aiohttp.ClientSession() as session:
        for p in parts:
            try:
                async with session.post(BOT_API_URL, json={
                    "chat_id": int(OWNER_CHAT_ID),
                    "text": p,
                    "disable_web_page_preview": True
                }) as r:
                    print(f"[{local_time()}] üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (len {len(p)}) ‚Äî {r.status}")
            except Exception as e:
                print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ Bot API: {e}")

# =========================
# üïµÔ∏è‚Äç‚ôÇÔ∏è Keyword checker
# =========================
def contains_keyword(text):
    if not text:
        return False
    t = text.lower()
    return any(kw in t for kw in KEYWORDS)

def mark_seen(chat_id, msg_id):
    key = f"{chat_id}:{msg_id}"
    if key not in SEEN:
        SEEN.add(key)
        save_seen(SEEN)
        return True
    return False

# =========================
# üßæ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
# =========================
async def format_msg(event):
    try:
        sender = await event.get_sender()
        author = " ".join(filter(None, [sender.first_name, sender.last_name])) or getattr(sender, "username", "‚Äî")
        if getattr(sender, "username", None):
            author += f" (@{sender.username})"
    except:
        author = "‚Äî"

    chat = await event.get_chat()
    ch_name = getattr(chat, "title", "‚Äî")
    link = ""
    if getattr(chat, "username", None):
        link = f"https://t.me/{chat.username}/{event.message.id}"

    msg_text = event.message.message or ""
    if len(msg_text) > 700:
        msg_text = msg_text[:700] + "..."

    text = (
        f"üìç {ch_name}\nüë§ {author}\nüïí {local_datetime()}\n\n"
        f"{msg_text}\n"
    )
    if link:
        text += f"üîó {link}"
    return text

# =========================
# üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
# =========================
async def check_history():
    print(f"[{local_time()}] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤...")
    async for dialog in client.iter_dialogs():
        if not (dialog.is_group or dialog.is_channel):
            continue
        try:
            msgs = await client.get_messages(dialog.id, limit=100)
            for m in msgs:
                if m.message and contains_keyword(m.message):
                    if mark_seen(dialog.id, m.id):
                        fake_pause()
                        fm = await format_msg(type("Ev", (), {"message": m, "get_sender": m.get_sender, "get_chat": m.get_chat}))
                        await bot_send(fm)
            await asyncio.sleep(random.uniform(1.5, 3.0))
        except FloodWaitError as e:
            print(f"[{local_time()}] ‚è≥ FloodWait: {e.seconds}s")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# =========================
# ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# =========================
@client.on(events.NewMessage)
async def handler(event):
    if not (event.is_group or event.is_channel):
        return
    if not event.message.message:
        return
    text = event.message.message
    if contains_keyword(text):
        if mark_seen(event.chat_id, event.message.id):
            fake_pause()
            fm = await format_msg(event)
            await bot_send(fm)
            print(f"[{local_time()}] ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ {event.chat_id}")

# =========================
# üßç‚Äç‚ôÇÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
# =========================
async def random_activity():
    while True:
        try:
            # —Å–ª—É—á–∞–π–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º "—á—Ç–µ–Ω–∏–µ", "–≤ –æ–Ω–ª–∞–π–Ω–µ" –∏–ª–∏ "–Ω–∏—á–µ–≥–æ"
            choice = random.choice(["sleep", "active", "idle"])
            if choice == "active":
                await client.send_read_acknowledge(await client.get_dialogs(limit=1))
                print(f"[{local_time()}] üëÅÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (read)")
            elif choice == "idle":
                await asyncio.sleep(random.uniform(20, 60))
            await asyncio.sleep(random.uniform(60, 180))
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def fake_pause():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω–∏-–∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    asyncio.sleep(random.uniform(0.5, 2.5))

# =========================
# üèÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥
# =========================
async def periodic_ping():
    while True:
        try:
            await bot_send(f"üèÑ‚Äç‚ôÇÔ∏è SurfHunter –∞–∫—Ç–∏–≤–µ–Ω ‚Äî {local_time()}")
            print(f"[{local_time()}] ‚è±Ô∏è –ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            print(f"[{local_time()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(600)

# =========================
# üöÄ Main
# =========================
async def main():
    print(f"[{local_time()}] üöÄ –ó–∞–ø—É—Å–∫ userbot...")
    await client.start()
    me = await client.get_me()
    print(f"[{local_time()}] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç {me.first_name or me.username} –∑–∞–ø—É—â–µ–Ω!")

    await bot_send(f"üåä Userbot –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —ç—Ñ–∏—Ä—É! {local_datetime()}\nü§ô SurfHunter –≥–æ—Ç–æ–≤.")
    asyncio.create_task(periodic_ping())
    asyncio.create_task(random_activity())

    while True:
        try:
            await check_history()
            await asyncio.sleep(CHECK_INTERVAL_HOURS * 3600)
        except Exception as e:
            print(f"[{local_time()}] üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)
            os.execv(sys.executable, [sys.executable] + sys.argv)

# =========================
# ‚èØÔ∏è Entrypoint
# =========================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"[{local_time()}] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        print(f"[{local_time()}] üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")