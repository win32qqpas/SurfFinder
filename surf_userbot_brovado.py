#!/usr/bin/env python3
# surf_userbot_brovado.py
# Userbot (Telethon) ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥—Ä—É–ø–ø—ã –∏ —à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è SurfHanter

import os
import sys
import json
import asyncio
import aiohttp
from datetime import datetime, timedelta, timezone
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.errors import FloodWaitError

# ------------------------
# ENV
# ------------------------
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")  # Maison Brovado
BOT_TOKEN = os.getenv("BOT_TOKEN")           # SurfHanter
OWNER_CHAT_ID = os.getenv("OWNER_CHAT_ID")   # –∫—É–¥–∞ –±–æ—Ç —à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHECK_INTERVAL_HOURS = float(os.getenv("CHECK_INTERVAL_HOURS", "1"))
TZ_OFFSET = int(os.getenv("TZ_OFFSET", "8"))  # –ë–∞–ª–∏ +8

# –ü—Ä–æ–≤–µ—Ä–∫–∞ ENV
missing = [k for k, v in {
    "API_ID": API_ID, "API_HASH": API_HASH,
    "SESSION_STRING": SESSION_STRING, "BOT_TOKEN": BOT_TOKEN,
    "OWNER_CHAT_ID": OWNER_CHAT_ID
}.items() if not v]

if missing:
    print("‚ùå Missing ENV vars:", missing)
    sys.exit(1)

# ------------------------
# –ß–∞—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
# ------------------------
CHAT_IDS = [
    -1001356532108, -1002363500314, -1001311121622, -1001388027785,
    -1001508876175, -1001277376699, -1001946343717, -1001341855810,
    -1001278212382, -1001361144761, -1001706773923, -1001643118953,
    -1001032422089, -1001716678830, -1001540608753, -1001867725040,
    -1001726137174, -1002624129997, -1002490371800
]

KEYWORDS = [
    "—Å–µ—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–∞","—Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥—É","—Å—ë—Ä—Ñ–∏–Ω–≥","—Å–µ—Ä—Ñ–∏–Ω–≥–æ–º","—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º",
    "—Å—ë—Ä—Ñ","—Å–µ—Ä—Ñ","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫","—É—Ä–æ–∫–∏ —Å–µ—Ä—Ñ–∏–Ω–≥–∞","—É—Ä–æ–∫–∏ —Å—ë—Ä—Ñ–∏–Ω–≥–∞",
    "—Å—ë—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","—Å—ë—Ä—Ñ–∫–µ–º–ø","–∑–∞–Ω—è—Ç–∏—è –ø–æ —Å—ë—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Ç—Ä–µ–Ω–µ—Ä –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É",
    "—Å–µ—Ä—Ñ—Ç—Ä–µ–Ω–µ—Ä","–∑–∞–Ω—è—Ç–∏–µ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ–∫–µ–º–ø","–∏—â—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ —Å–µ—Ä—Ñ–∏–Ω–≥—É","—Å–µ—Ä—Ñ—É—Ä–æ–∫–∏",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–µ—Ä—Ñ","surf","surfing","–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–µ—Ä—Ñ–∏–Ω–≥–∞"
]

HISTORY_CHECK_LIMIT = 100
SEEN_FILE = "seen_ids.json"

# ------------------------
# –í—Ä–µ–º—è
# ------------------------
UTC = timezone.utc
def local_now():
    return datetime.now(UTC) + timedelta(hours=TZ_OFFSET)

def local_time_str():
    return local_now().strftime("%H:%M")

def local_datetime_str():
    return local_now().strftime("%d.%m %H:%M")

# ------------------------
# Telethon client
# ------------------------
client = TelegramClient(StringSession(SESSION_STRING), int(API_ID), API_HASH)

# ------------------------
# Bot API
# ------------------------
BOT_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

async def bot_send_text(text):
    MAX = 3900
    parts = [text[i:i+MAX] for i in range(0, len(text), MAX)]
    async with aiohttp.ClientSession() as session:
        for p in parts:
            payload = {"chat_id": int(OWNER_CHAT_ID), "text": p, "disable_web_page_preview": True}
            try:
                async with session.post(BOT_API_URL, json=payload, timeout=30) as resp:
                    data = await resp.text()
                    if resp.status != 200:
                        print(f"[{local_time_str()}] ‚ö†Ô∏è Bot API {resp.status}: {data}")
                    else:
                        print(f"[{local_time_str()}] üì© Bot message sent (len {len(p)}).")
            except Exception as e:
                print(f"[{local_time_str()}] ‚ö†Ô∏è Error sending bot message: {e}")

# ------------------------
# Seen IDs
# ------------------------
def load_seen():
    try:
        if os.path.exists(SEEN_FILE):
            with open(SEEN_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                if isinstance(data, list):
                    return set(data)
        return set()
    except Exception as e:
        print(f"[{local_time_str()}] ‚ö†Ô∏è Error load seen file: {e}")
        return set()

def save_seen(seen_set):
    try:
        with open(SEEN_FILE, "w", encoding="utf-8") as f:
            json.dump(list(seen_set), f, ensure_ascii=False)
    except Exception as e:
        print(f"[{local_time_str()}] ‚ö†Ô∏è Error save seen file: {e}")

SEEN = load_seen()
def mark_seen(chat_id, msg_id):
    key = f"{chat_id}:{msg_id}"
    if key not in SEEN:
        SEEN.add(key)
        save_seen(SEEN)
        return True
    return False

# ------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ------------------------
def contains_keyword(text):
    if not text:
        return False
    t = text.lower()
    return any(kw in t for kw in KEYWORDS)

async def format_message(chat_identifier, msg):
    author = "‚Äî"
    try:
        sender = await msg.get_sender()
        if sender:
            author = " ".join(filter(None, [sender.first_name, sender.last_name])) or getattr(sender, "username", "‚Äî")
            if getattr(sender, "username", None):
                author += f" (@{sender.username})"
    except Exception:
        pass
    text_snippet = (msg.message[:700] + "...") if len(msg.message or "") > 700 else (msg.message or "")
    link = ""
    try:
        ent = await client.get_entity(chat_identifier)
        ch_name = ent.username or getattr(ent, "title", str(chat_identifier))
        if getattr(ent, "username", None):
            link = f"https://t.me/{ent.username}/{msg.id}"
    except Exception:
        ch_name = str(chat_identifier)
    return f"üìç {ch_name}\nüë§ {author.strip()}\nüïí {local_datetime_str()}\n\n{text_snippet}\n{link}"

# ------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
# ------------------------
async def check_history_and_send():
    print(f"[{local_time_str()}] üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ ({len(CHAT_IDS)} —á–∞—Ç–æ–≤)...")
    found = []
    for ch in CHAT_IDS:
        try:
            msgs = await client.get_messages(ch, limit=HISTORY_CHECK_LIMIT)
            for m in msgs:
                if m.message and contains_keyword(m.message):
                    if mark_seen(ch, m.id):
                        fm = await format_message(ch, m)
                        found.append(fm)
            await asyncio.sleep(1.1)
        except FloodWaitError as e:
            print(f"[{local_time_str()}] ‚è≥ FloodWait –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {ch}: {e.seconds}s")
            await asyncio.sleep(e.seconds + 5)
        except Exception as e:
            print(f"[{local_time_str()}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {ch}: {e}")
    if found:
        batch = "\n\n---\n\n".join(found)
        await bot_send_text(f"üåä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ ({len(found)}):\n\n{batch}")
        print(f"[{local_time_str()}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(found)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

# ------------------------
# Handler –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ------------------------
@client.on(events.NewMessage(chats=CHAT_IDS))
async def new_message_handler(event):
    try:
        text = event.message.message or ""
        chat_id = event.chat_id
        preview = text[:120].replace("\n", " ")
        print(f"[{local_time_str()}] üÜï –ù–æ–≤–æ–µ